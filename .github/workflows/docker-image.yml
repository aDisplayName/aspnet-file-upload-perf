name: Docker Image CI

on:
  workflow_dispatch:
  # push:
  #  branches: [ "main" ]
  # pull_request:
  #  branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run semantic-release (dry-run)
      id: dry-run
      uses: cycjimmy/semantic-release-action@v4
      with:
        dry_run: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
    - name: Inspect semantic-release (dry-run) outcome
      shell: python
      env:
        PYTHONPATH: ${{ github.workspace }}/.github
        SR_LAST: ${{ steps.dry-run.outputs.last_release_version }}
        SR_PUBLISHED: ${{ steps.dry-run.outputs.new_release_published }}
        SR_CHANNEL: ${{ steps.dry-run.outputs.new_release_channel }}
        SR_VERSION: ${{ steps.dry-run.outputs.new_release_version }}
        SR_MAJOR: ${{ steps.dry-run.outputs.new_release_major_version }}
        SR_MINOR: ${{ steps.dry-run.outputs.new_release_minor_version }}
        SR_PATCH: ${{ steps.dry-run.outputs.new_release_patch_version }}
        SR_NOTES: ${{ steps.dry-run.outputs.new_release_notes }}
      run: |
        from lib import *
        import os

        header('semantic-release job outputs')
        info('last      = {}'.format(os.environ['SR_LAST']))
        info('published = {}'.format(os.environ['SR_PUBLISHED']))
        info('channel   = {}'.format(os.environ['SR_CHANNEL']))
        info('version   = {}'.format(os.environ['SR_VERSION']))
        info('major     = {}'.format(os.environ['SR_MAJOR']))
        info('minor     = {}'.format(os.environ['SR_MINOR']))
        info('patch     = {}'.format(os.environ['SR_PATCH']))
        info('notes ‚èé\n{}'.format(os.environ['SR_NOTES']))

        header('sanity checks')
        action('should be published')
        assert_equality((
            (os.environ['SR_PUBLISHED'], 'true'),
        ))
    # - name: Build the Docker image
    #   run: docker build . --file Dockerfile --tag ghcr.io/adisplay:$(date +%s)

