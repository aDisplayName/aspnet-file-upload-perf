name: Docker Image CI

on:
  workflow_dispatch:
  # push:
  #  branches: [ "main" ]
  # pull_request:
  #  branches: [ "main" ]


env:
  COMMIT_NAME: aDisplayName
  COMMIT_EMAIL: mattali@gmail.com

jobs:
  semver:
    name: Semantic Version
    runs-on: ubuntu-latest
    outputs:
      last: ${{ steps.release.outputs.last_release_version }}
      published: ${{ steps.release.outputs.new_release_published }}
      channel: ${{ steps.release.outputs.new_release_channel }}
      version: ${{ steps.release.outputs.new_release_version }}
      major: ${{ steps.release.outputs.new_release_major_version }}
      minor: ${{ steps.release.outputs.new_release_minor_version }}
      patch: ${{ steps.release.outputs.new_release_patch_version }}
      notes: ${{ steps.release.outputs.new_release_notes }}
      prerelease: ${{ steps.inspect.outputs.prerelease }}
    steps:
    - uses: actions/checkout@v4
      with:
        path: repository
    - name: Run semantic-release (dry-run)
      id: release
      uses: cycjimmy/semantic-release-action@v4
      with:
        working_directory: repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_COMMITTER_NAME: ${{ env.COMMIT_NAME }}
        GIT_COMMITTER_EMAIL: ${{ env.COMMIT_EMAIL }}
        GIT_AUTHOR_NAME: ${{ env.COMMIT_NAME }}
        GIT_AUTHOR_EMAIL: ${{ env.COMMIT_EMAIL }}
    - name: Inspect semantic-release (dry-run) outcome
      shell: python
      id: inspect
      env:
        PYTHONPATH: ${{ github.workspace }}/repository/.github
        SR_LAST: ${{ steps.release.outputs.last_release_version }}
        SR_PUBLISHED: ${{ steps.release.outputs.new_release_published }}
        SR_CHANNEL: ${{ steps.release.outputs.new_release_channel }}
        SR_VERSION: ${{ steps.release.outputs.new_release_version }}
        SR_MAJOR: ${{ steps.release.outputs.new_release_major_version }}
        SR_MINOR: ${{ steps.release.outputs.new_release_minor_version }}
        SR_PATCH: ${{ steps.release.outputs.new_release_patch_version }}
        SR_NOTES: ${{ steps.release.outputs.new_release_notes }}
      run: |
        from lib import *
        import os

        header('semantic-release job outputs')
        info('last      = {}'.format(os.environ['SR_LAST']))
        info('published = {}'.format(os.environ['SR_PUBLISHED']))
        info('channel   = {}'.format(os.environ['SR_CHANNEL']))
        info('version   = {}'.format(os.environ['SR_VERSION']))
        info('major     = {}'.format(os.environ['SR_MAJOR']))
        info('minor     = {}'.format(os.environ['SR_MINOR']))
        info('patch     = {}'.format(os.environ['SR_PATCH']))
        info('notes ‚èé\n{}'.format(os.environ['SR_NOTES']))

        header('sanity checks')
        action('should be published')
        assert_equality((
            (os.environ['SR_PUBLISHED'], 'true'),
        ))

        header('set the prerelease status')
        is_prerelease = '-' in os.environ['SR_VERSION']
        info('pre-release = {}'.format(is_prerelease))
        output = '{}'.format(str(is_prerelease).lower())
        with open(os.environ['GITHUB_OUTPUT'], 'a') as outfile:
            print (f'prerelease={output}', file=outfile)

  build:
    needs: 
    - semver
    runs-on: ubuntu-latest
    env:
      HELM_DOCS_VERSION: "1.11.0"
      CR_VERSION: "1.4.1"
      VERSION: ${{ needs.semver.outputs.version }}
      ASSVERSION: ${{ needs.semver.outputs.major}}.${{ needs.semver.outputs.minor }}.${{ needs.semver.outputs.patch }}.0
      PRERELEASE: ${{ needs.semver.outputs.prerelease }}
      GHCR_IMAGE: "ghcr.io/adisplayname/aspnet-file-upload-perf"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repository
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.COMMIT_NAME }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_IMAGE }}
      - name: Build container images
        uses: docker/build-push-action@v6
        with:
          context: repository
          platforms: linux/amd64,linux/arm64
          build-args: |
            "APP_VERSION=${{ env.ASSVERSION }}"
          push: false
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ env.VERSION }}

      - name: Push container images tag (Latest)
        uses: docker/build-push-action@v6
        if: ${{ env.PRERELEASE != 'true' }}
        with:
          context: repository
          platforms: linux/amd64,linux/arm64
          build-args: |
            "APP_VERSION=${{ env.ASSVERSION }}"
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:latest

      - name: Push container images tag (Release)
        uses: docker/build-push-action@v6
        with:
          context: repository
          platforms: linux/amd64,linux/arm64
          build-args: |
            "APP_VERSION=${{ env.ASSVERSION }}"
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ env.GHCR_IMAGE }}:${{ env.VERSION }}


  build-chart:
    needs:
      - semver
      - build
    runs-on: ubuntu-latest
    env:
      HELM_DOCS_VERSION: "1.11.0"
      CR_VERSION: "1.4.1"
      VERSION: ${{ needs.semver.outputs.version }}
      PRERELEASE: ${{ needs.semver.outputs.prerelease }}
      GHCR_IMAGE: "ghcr.io/adisplayname/aspnet-file-upload-perf"
    steps:
      - name: Configure git
        run: |
          set -euo pipefail
          git config --global user.name '${{ env.COMMIT_NAME }}'
          git config --global user.email '${{ env.COMMIT_EMAIL }}'
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repository
      - name: Set up helm
        uses: azure/setup-helm@v4
      - name: Cache for chart-releaser
        id: cache-cr
        uses: actions/cache@v4
        with:
          path: bin/cr
          key: ${{ runner.os }}-cr-${{ env.CR_VERSION }}
      - name: Set up chart-releaser
        if: steps.cache-cr.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          [ -d bin ] || mkdir bin
          URL='https://github.com/helm/chart-releaser/releases/download/v${{ env.CR_VERSION }}/chart-releaser_${{ env.CR_VERSION }}_linux_amd64.tar.gz'
          curl -sSL "${URL}" | tar xz -C bin cr

      - name: Cache for helm-docs
        id: cache-helm-docs
        uses: actions/cache@v4
        with:
          path: bin/helm-docs
          key: ${{ runner.os }}-helm-docs-${{ env.HELM_DOCS_VERSION }}

      - name: Set up helm-docs
        if: steps.cache-helm-docs.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          [ -d bin ] || mkdir bin
          URL='https://github.com/norwoodj/helm-docs/releases/download/v${{ env.HELM_DOCS_VERSION }}/helm-docs_${{ env.HELM_DOCS_VERSION }}_Linux_x86_64.tar.gz'
          curl -sSL "${URL}" | tar xz -C bin helm-docs

      - name: Run chart-releaser
        shell: python
        env:
          WORKSPACE: ${{ github.workspace }}
          PYTHONPATH: ${{ github.workspace }}/repository/.github
          HELM_DOCS_PATH: ${{ github.workspace }}/bin/helm-docs
          CR_PATH: ${{ github.workspace }}/bin/cr
          CR_TOKEN: ${{ secrets.CHARTSREPO_GITHUB_TOKEN }}
          CHART_NAME: aspnet-file-upload-perf
          VERSION: ${{ needs.semver.outputs.version }}
          PRERELEASE: ${{ needs.semver.outputs.prerelease }}
          ARTIFACTHUB_CHANGELOG: ${{ env.ARTIFACTHUB_CHANGELOG }}
        run: |
          from lib import *
          import os, yaml, shutil

          chart_path = os.path.join(os.environ['WORKSPACE'], 'repository', 'helm', os.environ['CHART_NAME'])
          os.chdir(chart_path)

          # header('generate chart readme')

          # run('make', '-C', '../../', 'helm-docs')
          # run(os.environ['HELM_DOCS_PATH'], '--dry-run')
          # run(os.environ['HELM_DOCS_PATH'])

          header('prepare chart manifest')

          version = os.environ['VERSION']
          assert_length_above((
              (version, 0),
          ))
          is_prerelease = os.environ['PRERELEASE']
          is_security_update = 'false' # FIXME
          assert_in((
            (is_prerelease,      ('true', 'false')),
            (is_security_update, ('true', 'false')),
          ))

          info('version      = {}'.format(version))
          info('prerelease   = {}'.format(is_prerelease))
          info('security fix = {}'.format(is_security_update))

          manifest_file = 'Chart.yaml'
          manifest = yaml.safe_load(open(manifest_file, 'r'))
          manifest.update({
              'version': version,
              'appVersion': version,
          })
          manifest['annotations'].update({
              'artifacthub.io/prerelease': is_prerelease,
              'artifacthub.io/containsSecurityUpdates': is_security_update,
          })
          changelog = os.environ['ARTIFACTHUB_CHANGELOG']
          if len(changelog):
            manifest['annotations'].update({
              'artifacthub.io/changes': changelog,
            })
          open(manifest_file, 'w').write(yaml.dump(manifest))

          header('inspect files to be released')

          for yaml_file in (manifest_file,):
              action('YAML: {}'.format(yaml_file))
              print(yaml.safe_load(open(yaml_file, 'r')))

          header('release the chart')

          action('clone helm charts repository')
          charts_repo = os.path.join(os.environ['WORKSPACE'], 'adisplayname-charts')
          run('git', 'clone', 'https://github.com/adisplayname/helm-charts', charts_repo)

          action('copy chart files')
          repo_chart_path = os.path.join(charts_repo, 'charts', os.environ['CHART_NAME'])
          shutil.copytree(chart_path, repo_chart_path, symlinks=True, dirs_exist_ok=False)

          action('create the chart package')
          run(os.environ['CR_PATH'], 'package', repo_chart_path, cwd=charts_repo)

          action('upload the chart')
          run(os.environ['CR_PATH'], 'upload', '--skip-existing', '--owner', 'adisplayname', '--git-repo', 'helm-charts', cwd=charts_repo)

          action('update repository index')
          run(os.environ['CR_PATH'], 'index', '--push', '-i', 'index.yaml', '--owner', 'adisplayname', '--git-repo', 'helm-charts', '--pages-index-path','charts', cwd=charts_repo)
